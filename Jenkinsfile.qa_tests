// Jenkinsfile.qa_tests (in majd.kassem.business_qa.git)
pipeline {
    agent any
    tools{
        nodejs 'NodeJS_24'
    }

    parameters {
        string(name: 'STAGING_URL_PARAM', defaultValue: 'https://majd-kassem-business-dev.onrender.com/', description: 'URL of the SUT staging environment')
        // >>> REMOVED: UPSTREAM_SUT_BUILD_NUMBER parameter is not needed here <<<
    }

    environment {
        QA_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business_qa.git'
        QA_BRANCH = 'dev'
        LIVE_DEPLOY_JOB_NAME = 'SUT-Deploy-Live' // This is the job QA directly triggers if successful
        GIT_CREDENTIAL_ID = 'git_id'

        // Define where your QA tests will output Allure results
        // >>> MODIFIED: Simplified to just 'allure-results' and 'test-results' at the root of QA workspace <<<
        QA_ALLURE_RESULTS_ROOT = 'allure-results'
        QA_JUNIT_RESULTS_ROOT = 'test-results'
    }

    stages {
        stage('Checkout QA Tests') {
            steps {
                script {
                    echo "Checking out QA repository: ${env.QA_REPO}, branch: ${env.QA_BRANCH}"
                    checkout scm
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    sh 'python3 -m venv ./.venv'
                    sh './.venv/bin/pip install --no-cache-dir -r requirements.txt'
                    echo "Python environment setup complete."
                }
            }
        }

        // >>> REMOVED: 'Collect Upstream Test Results' stage <<<
        // This logic belongs in the parent job for consolidated reporting.

        stage('Run QA Tests against Staging') {
            steps {
                script {
                    echo "Running Selenium tests against Staging URL: ${params.STAGING_URL_PARAM}"
                    // Clean and create directories for Allure and JUnit results for *this* job
                    sh "rm -rf ${env.QA_ALLURE_RESULTS_ROOT}"
                    sh "mkdir -p ${env.QA_ALLURE_RESULTS_ROOT}"
                    sh "rm -rf ${env.QA_JUNIT_RESULTS_ROOT}"
                    sh "mkdir -p ${env.QA_JUNIT_RESULTS_ROOT}"

                    // Your pytest command - outputting directly to env.QA_ALLURE_RESULTS_ROOT
                    sh "./.venv/bin/pytest src/tests --alluredir=${env.QA_ALLURE_RESULTS_ROOT} --junitxml=${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml --browser chrome-headless --baseurl \"${params.STAGING_URL_PARAM}\""
                }
            }
        }

        // >>> REMOVED: 'Generate Final Combined Allure Report' stage <<<
        // The consolidated report will be generated by the parent job.

        stage('Trigger SUT Live Deployment (if tests pass)') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "QA tests passed. Triggering live deployment job: ${env.LIVE_DEPLOY_JOB_NAME}"
                    build job: env.LIVE_DEPLOY_JOB_NAME, wait: true, propagate: true
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Publishing Allure Test Report (for QA-Tests-Staging job itself)...'
                tool name: 'Allure_2.34.0', type: 'ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation'

                allure([
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: env.QA_ALLURE_RESULTS_ROOT]] // Publish QA job's own report
                ])

                echo 'Publishing JUnit XML Reports...'
                junit "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml"

                // >>> CRUCIAL STEP: ARCHIVE ALLURE RAW RESULTS FOR PARENT JOB <<<
                echo 'Archiving Allure raw results for parent job to consume...'
                archiveArtifacts artifacts: "${env.QA_ALLURE_RESULTS_ROOT}/**", fingerprint: true
                // The filter in the parent job's copyArtifacts step will use this exact path pattern.

                def testResultAction = currentBuild.testResultAction
                if (testResultAction != null) {
                    def totalTests = testResultAction.totalCount
                    def failedTests = testResultAction.failCount
                    def skippedTests = testResultAction.skipCount
                    currentBuild.displayName = "#${env.BUILD_NUMBER} (${totalTests} tests, ${failedTests} failed)"
                    currentBuild.description = "Total: ${totalTests} | Failed: ${failedTests} | Skipped: ${skippedTests}"
                }
                // deleteDir() is now handled by the separate 'always' block below
            }
        }
        success {
            script {
                echo 'QA Tests pipeline finished successfully. Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - SUCCESS",
                    body: """
                    <p>Build Status: <b>SUCCESS</b></p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Allure Report: <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml"
                )
            }
        }
        failure {
            script {
                echo 'QA Tests pipeline FAILED. No deployment to live. Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - FAILED",
                    body: """
                    <p>Build Status: <b>FAILED!</b></p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Please check the console output for details: <a href="${env.BUILD_URL}console">Console Output</a></p>
                    <p>Allure Report (if generated): <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml"
                )
            }
        }
        unstable {
            script {
                echo 'QA Tests pipeline finished with unstable results (e.g., some tests failed). Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - UNSTABLE (Some Tests Failed)",
                    body: """
                    <p>Build Status: <b>UNSTABLE</b> (Some tests failed)</p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Allure Report: <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml"
                )
            }
        }
        always {
            deleteDir() // This ensures cleanup runs last.
        }
    }
}