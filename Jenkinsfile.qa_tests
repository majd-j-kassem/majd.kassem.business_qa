// Jenkinsfile.qa_tests (in majd.kassem.business_qa.git)
pipeline {
    agent any // Use 'any' as it seems your existing setup on the agent works.
    tools{
        nodejs 'NodeJS_24'
    }

    parameters {
        string(name: 'STAGING_URL_PARAM', defaultValue: 'https://majd-kassem-business-dev.onrender.com/', description: 'URL of the SUT staging environment')
        string(name: 'UPSTREAM_SUT_BUILD_NUMBER', defaultValue: '', description: 'Build number of the upstream SUT-Build job') 
    }

    environment {
        QA_REPO = 'https://github.com/majd-j-kassem/majd.kassem.business_qa.git'
        QA_BRANCH = 'dev' // Or 'main' if your test code is kept on main
        LIVE_DEPLOY_JOB_NAME = 'SUT-Deploy-Live' // EXACT name of the Jenkins job for live deployment
        GIT_CREDENTIAL_ID = 'git_id' // <--- Use the ID you created in Step 1
        QA_ALLURE_RESULTS_DIR = 'allure-results'
    }

    stages {
        stage('Checkout QA Tests') {
            steps {
                script {
                    echo "Checking out QA repository: ${env.QA_REPO}, branch: ${env.QA_BRANCH}"
                    // Ensure the 'checkout scm' uses the environment variables for clarity if needed,
                    // otherwise your existing 'checkout scm' will use the job's SCM config.
                    // Assuming your job's SCM is already configured to use GIT_CREDENTIAL_ID and the QA_REPO/QA_BRANCH
                    checkout scm
                }
            }
        }

        // NEW STAGE: Setup Python Virtual Environment
        stage('Setup Python Environment') {
            steps {
                script {
                    echo "Setting up Python virtual environment and installing dependencies..."
                    // Ensure python3 is available on your Jenkins agent.
                    // This creates a virtual environment named '.venv' in your workspace root.
                    sh 'python3 -m venv ./.venv'
                    // Install dependencies from requirements.txt into the virtual environment.
                    // --no-cache-dir is good practice in CI to avoid large caches.
                    sh './.venv/bin/pip install --no-cache-dir -r requirements.txt'
                    echo "Python environment setup complete."
                }
            }
        }
        // NEW STAGE: Collect Allure Results from Upstream SUT Build Job
        // This stage runs before QA tests so results can be combined later.
        stage('Collect Upstream Test Results') {
            when {
                // This stage will only run if an upstream build number is provided.
                // It's crucial for gathering results from the build job.
                expression { params.UPSTREAM_SUT_BUILD_NUMBER != '' }
            }
            steps {
                script {
                    echo "Collecting Unit, Integration, and API test results from SUT-Build job #${params.UPSTREAM_SUT_BUILD_NUMBER}..."
                    // Create a dedicated subdirectory within this job's allure-results for SUT results
                    sh "mkdir -p ${env.QA_ALLURE_RESULTS_DIR}/sut-tests"

                    // Use the 'Copy Artifact' plugin to fetch results from the SUT build job.
                    // Make sure the 'Copy Artifact' plugin is installed in your Jenkins.
                    copyArtifacts(
                        projectName: 'SUT-Build-Staging', // <--- REPLACE with the EXACT name of your SUT build Jenkins job
                        selector: specific("${params.UPSTREAM_SUT_BUILD_NUMBER}"), // Get artifacts from the specific SUT build
                        target: "${env.QA_ALLURE_RESULTS_DIR}/sut-tests/", // Copy them into this job's workspace under a dedicated folder
                        filter: 'allure-results/**' // Copy the entire archived allure-results directory from the SUT job
                    )
                    echo "Successfully collected upstream SUT test results."
                }
            }
        }

        stage('Run QA Tests against Staging') {
            steps {
                script {
                    echo "Running Selenium tests against Staging URL: ${params.STAGING_URL_PARAM}"
                    // It's good practice to create the allure-results directory explicitly
                     sh "mkdir -p ${env.QA_ALLURE_RESULTS_DIR}/qa-tests"
                     sh "mkdir -p test-results"  // For JUnit XML if you decide to use it separately

                    // CORRECTED LINE: Used ./venv/bin/pytest and correctly quoted --baseurl
                    // Now, ./.venv/bin/pytest should be found after the setup stage
                    sh "./.venv/bin/pytest src/tests --alluredir=${env.QA_ALLURE_RESULTS_DIR}/qa-tests --junitxml=test-results/junit_report.xml --browser chrome-headless --baseurl \"${params.STAGING_URL_PARAM}\""
                }
            }
        }
         stage('Generate Final Combined Allure Report') {
            when {
                expression { true } 
            }
            steps {
                script {
                    echo "Generating final combined Allure report from all collected results (Unit, Integration, API, QA)..."
                    allure([
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: env.QA_ALLURE_RESULTS_DIR]] 
                    ])
                }
            }
        }
        stage('Trigger SUT Live Deployment (if tests pass)') {
            when {
                expression { currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "QA tests passed. Triggering live deployment job: ${env.LIVE_DEPLOY_JOB_NAME}"
                    build job: env.LIVE_DEPLOY_JOB_NAME, wait: true, propagate: true
                }
            }
        }
    }

    // --- Report Publishing and Cleanup ---
    post {
        always {
            script {
                echo 'Publishing Allure Test Report (for QA-Tests-Staging job)...'
                tool name: 'Allure_2.34.0', type: 'ru.yandex.qatools.allure.jenkins.tools.AllureCommandlineInstallation'

                allure([
                    reportBuildPolicy: 'ALWAYS', // Always publish the report
                    results: [[path: env.QA_ALLURE_RESULTS_DIR]] // Specify where the raw results are
                ])

                echo 'Publishing JUnit XML Reports...'
                junit "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml" // Use defined env var

                // >>> NEW CRUCIAL STEP: ARCHIVE ALLURE RAW RESULTS <<<
                echo 'Archiving Allure raw results for parent job to consume...'
                archiveArtifacts artifacts: "${env.QA_ALLURE_RESULTS_ROOT}/**", fingerprint: true
                // The filter in the parent job's copyArtifacts step will use this path.

                // Optional: Update build description/display name for quick overview
                def testResultAction = currentBuild.testResultAction
                if (testResultAction != null) {
                    def totalTests = testResultAction.totalCount
                    def failedTests = testResultAction.failCount
                    def skippedTests = testResultAction.skipCount
                    currentBuild.displayName = "#${env.BUILD_NUMBER} (${totalTests} tests, ${failedTests} failed)"
                    currentBuild.description = "Total: ${totalTests} | Failed: ${failedTests} | Skipped: ${skippedTests}"
                }
            }
        }
        // --- MODIFIED POST-ACTION BLOCKS FOR CLEANUP ---
        // Moved deleteDir() to a separate always block to ensure it runs last.
        // This ensures email attachments are processed before the workspace is cleaned.
        success {
            script {
                echo 'QA Tests pipeline finished successfully. Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - SUCCESS",
                    body: """
                    <p>Build Status: <b>SUCCESS</b></p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Allure Report: <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml" // Use env var
                )
            }
            // deleteDir() is now handled by the separate 'always' block below
        }
        failure {
            script {
                echo 'QA Tests pipeline FAILED. No deployment to live. Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - FAILED",
                    body: """
                    <p>Build Status: <b>FAILED!</b></p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Please check the console output for details: <a href="${env.BUILD_URL}console">Console Output</a></p>
                    <p>Allure Report (if generated): <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml" // Use env var
                )
            }
            // deleteDir() is now handled by the separate 'always' block below
        }
        unstable {
            script {
                echo 'QA Tests pipeline finished with unstable results (e.g., some tests failed). Sending email...'
                emailext (
                    to: 'mjdwassouf@gmail.com',
                    subject: "Jenkins Build ${env.JOB_NAME} - #${env.BUILD_NUMBER} - UNSTABLE (Some Tests Failed)",
                    body: """
                    <p>Build Status: <b>UNSTABLE</b> (Some tests failed)</p>
                    <p>Project: ${env.JOB_NAME}</p>
                    <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                    <p>Allure Report: <a href="${env.BUILD_URL}allure/">Click here to view Allure Report</a></p>
                    <p>See attached for JUnit XML results.</p>
                    """,
                    mimeType: 'text/html',
                    attachmentsPattern: "${env.QA_JUNIT_RESULTS_ROOT}/junit_report.xml"
                )
            }
            // deleteDir() is now handled by the separate 'always' block below
        }
        // >>> NEW: SEPARATE ALWAYS BLOCK FOR WORKSPACE CLEANUP <<<
        // This ensures deleteDir() runs AFTER all other post-actions, including emailing.
        always {
            deleteDir()
        }
    }
}